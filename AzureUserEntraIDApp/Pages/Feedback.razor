@page "/feedback"

@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject IConfiguration Configuration

<PageTitle>Feedback</PageTitle>

<h3>Feedback</h3>

@if (!string.IsNullOrEmpty(feedbackResponse))
{
    <div class="alert alert-success" role="alert">
        @feedbackResponse
    </div>
}

<EditForm Model="feedback" OnValidSubmit="SubmitFeedback">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="feedbackText" class="form-label">Feedback</label>
        <textarea id="feedbackText" class="form-control" @bind="feedback.Text" rows="4" cols="50"></textarea>
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input id="email" class="form-control" @bind="feedback.Email" />
    </div>
    <div class="mb-3">
        <label for="phoneNumber" class="form-label">Phone Number</label>
        <input id="phoneNumber" class="form-control" @bind="feedback.PhoneNumber" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private UserFeedback feedback = new UserFeedback();
    private string feedbackResponse = string.Empty;

    private async Task SubmitFeedback()
    {
        if (string.IsNullOrEmpty(feedback.Text) || string.IsNullOrEmpty(feedback.Email) || string.IsNullOrEmpty(feedback.PhoneNumber))
        {
            feedbackResponse = "Please enter all required information.";
            return;
        }

        var response = await Http.PostAsJsonAsync("api/UserFeedback", feedback);
        if (response.IsSuccessStatusCode)
        {
            try
            {
                var result = await response.Content.ReadFromJsonAsync<UserFeedback>();
                if (result != null)
                {
                    // Determine the feedback response based on sentiment
                    switch (result.Sentiment.ToLower())
                    {
                        case "positive":
                            feedbackResponse = "Thank you for the positive feedback.";
                            break;
                        case "neutral":
                            feedbackResponse = "We will try to provide better services in the future.";
                            break;
                        case "negative":
                            feedbackResponse = "A help desk representative will reach out to you soon to understand the issue and improve your experience.";
                            break;
                        default:
                            feedbackResponse = "Thank you for your feedback.";
                            break;
                    }

                    // Send the feedback to the database
                    var data = new
                    {
                        usertext = result.Text,
                        useremail = result.Email,
                        userphonenumber = result.PhoneNumber,
                        usersentiment = result.Sentiment,
                    };

                    var endpoint = "data-api/rest/UserFeedback";
                    var dbResponse = await Http.PostAsJsonAsync(endpoint, data);

                    // Send email using Azure Communication Services
                    await SendEmailAsync(result.Email, result.Text, feedbackResponse);
                }
                else
                {
                    feedbackResponse = "Error processing response: result is null.";
                }
            }
            catch (Exception ex)
            {
                feedbackResponse = $"Error processing response: {ex.Message}";
            }
        }
        else
        {
            feedbackResponse = "Error submitting feedback.";
        }
    }

    private async Task SendEmailAsync(string recipientEmail, string feedbackText, string feedbackResponse)
    {
        var emailRequest = new
        {
            RecipientEmail = recipientEmail,
            UserText = feedbackText,
            FeedbackResponse = feedbackResponse
        };

        var response = await Http.PostAsJsonAsync("api/SendFeedbackEmail", emailRequest);
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine("Error sending email.");
        }
    }

    public class UserFeedback
    {
        public string Text { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string Sentiment { get; set; } = string.Empty;
    }
}