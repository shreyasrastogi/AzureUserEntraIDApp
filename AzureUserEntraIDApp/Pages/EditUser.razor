@page "/edituser/{userPrincipalName}"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Edit User</h3>

@if (successMessageVisible)
{
    <div class="alert alert-success" role="alert">
        User Updated Successfully
    </div>
}

<EditForm Model="user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="firstName" class="form-label">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="user.givenName" />
    </div>
    <div class="mb-3">
        <label for="lastName" class="form-label">Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="user.surname" />
    </div>
    <div class="mb-3">
        <label for="userPrincipalName" class="form-label">User Principal Name</label>
        <InputText id="userPrincipalName" class="form-control" @bind-Value="user.UserPrincipalName" />
    </div>
    <div class="mb-3">
        <label for="nickName" class="form-label">Nick Name</label>
        <InputText id="nickName" class="form-control" @bind-Value="user.MailNickname" />
    </div>
    <div class="mb-3">
        <label for="displayName" class="form-label">Display Name</label>
        <InputText id="displayName" class="form-control" @bind-Value="user.DisplayName" />
    </div>
    <div class="mb-3">
        <label for="department" class="form-label">Department</label>
        <InputText id="department" class="form-control" @bind-Value="user.Department" />
    </div>
    <div class="mb-3">
        <label for="otherEmail" class="form-label">Other Email</label>
        <InputText id="otherEmail" class="form-control" @bind-Value="user.OtherEmail" />
    </div>

    <button type="submit" class="btn btn-primary">Update User</button>
</EditForm>

@code {
    [Parameter]
    public string userPrincipalName { get; set; }

    private User user = new User();
    private bool successMessageVisible = false;

    protected override async Task OnInitializedAsync()
    {
        user = await Http.GetFromJsonAsync<User>($"/api/GetUser/{userPrincipalName}");
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PutAsJsonAsync("/api/UpdateUser", user);
        if (response.IsSuccessStatusCode)
        {
            successMessageVisible = true;
        }
        else
        {
            // Handle error
        }
    }

    public class User
    {
        public string givenName { get; set; }
        public string surname { get; set; }
        public string UserPrincipalName { get; set; }
        public string MailNickname { get; set; }
        public string DisplayName { get; set; }
        public string Department { get; set; }
        public string OtherEmail { get; set; }
    }
}






